{"version":3,"file":"static/js/196.93c049c2.chunk.js","mappings":"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","sources":["components/ConfirmModal.jsx","views/Pagination.jsx","views/admin/Customers.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ConfirmModal = ({ message, SetModalClose, confimFunction }) => {\r\n  const handleConfirm = () => {\r\n    confimFunction();\r\n    SetModalClose(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    SetModalClose(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white p-6 rounded-lg shadow-lg w-96\">\r\n        <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">\r\n          Confirmation\r\n        </h2>\r\n        <p className=\"text-sm text-gray-600 mb-6\">{message}</p>\r\n        <div className=\"flex justify-end gap-4\">\r\n          <button\r\n            onClick={handleCancel}\r\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleConfirm}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\r\n          >\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmModal;\r\n","import React from \"react\";\r\nimport {\r\n  MdOutlineKeyboardDoubleArrowLeft,\r\n  MdOutlineKeyboardDoubleArrowRight,\r\n} from \"react-icons/md\";\r\n\r\nconst Pagination = ({\r\n  pageNumber,\r\n  setPageNumber,\r\n  totalItem,\r\n  perPage,\r\n  showItem,\r\n}) => {\r\n  const totalPage = Math.ceil(totalItem / perPage); // Total pages\r\n  let startPage = pageNumber; // Starting page number\r\n  const diff = totalPage - pageNumber;\r\n\r\n  // Adjust startPage if the difference between totalPage and current page is less than showItem\r\n  if (diff <= showItem) {\r\n    startPage = totalPage - showItem + 1;\r\n  }\r\n\r\n  let endPage = startPage < 1 ? showItem : showItem + startPage; // End page number\r\n\r\n  if (startPage <= 0) startPage = 1; // Ensure startPage is valid\r\n  if (endPage > totalPage + 1) endPage = totalPage + 1; // Ensure endPage doesn't exceed total pages\r\n\r\n  const createBtn = () => {\r\n    const btns = [];\r\n    for (let i = startPage; i < endPage; i++) {\r\n      btns.push(\r\n        <li\r\n          key={i}\r\n          onClick={() => setPageNumber(i)}\r\n          className={`${\r\n            pageNumber === i\r\n              ? \"bg-green-600 text-white\"\r\n              : \"bg-slate-600 hover:bg-green-900 text-[#d0d2d6]\"\r\n          } w-[33px] h-[33px] rounded-full flex justify-center items-center cursor-pointer`}\r\n        >\r\n          {i}\r\n        </li>\r\n      );\r\n    }\r\n    return btns;\r\n  };\r\n\r\n  return (\r\n    <ul className=\"flex gap-3 items-center\">\r\n      {/* Previous Button */}\r\n      {pageNumber > 1 && (\r\n        <li\r\n          onClick={() => setPageNumber(pageNumber - 1)}\r\n          className=\"w-[33px] h-[33px] rounded-full flex justify-center items-center bg-slate-400 text-black cursor-pointer hover:bg-indigo-400\"\r\n        >\r\n          <MdOutlineKeyboardDoubleArrowLeft />\r\n        </li>\r\n      )}\r\n\r\n      {/* Page Buttons */}\r\n      {createBtn()}\r\n\r\n      {/* Next Button */}\r\n      {pageNumber < totalPage && (\r\n        <li\r\n          onClick={() => setPageNumber(pageNumber + 1)}\r\n          className=\"w-[33px] h-[33px] rounded-full flex justify-center items-center bg-slate-400 text-black cursor-pointer hover:bg-indigo-400\"\r\n        >\r\n          <MdOutlineKeyboardDoubleArrowRight />\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pagination from \"../Pagination\";\r\nimport { TbLockOpen2 } from \"react-icons/tb\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  get_customer,\r\n  block_unblock_customer,\r\n  messageClear,\r\n} from \"../../store/Reducers/customerAdminReducer\";\r\nimport { TbLockFilled } from \"react-icons/tb\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport ConfirmModal from \"./../../components/ConfirmModal\";\r\n\r\nconst Customers = () => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(5);\r\n  const [modalClose, setModalClose] = useState(true);\r\n  const [blockItem, setblockItem] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { successMessage, errorMessage, loader, customers, totalCustomers } =\r\n    useSelector((store) => store.customer);\r\n\r\n  //get details of customer\r\n  useEffect(() => {\r\n    const obj = {\r\n      perPage: parseInt(perPage),\r\n      page: parseInt(currentPage),\r\n      searchValue,\r\n    };\r\n\r\n    dispatch(get_customer(obj));\r\n  }, [perPage, currentPage, searchValue, dispatch]);\r\n\r\n  //block customer\r\n  const handleBlock = () => {\r\n    const customerId = blockItem._id;\r\n    dispatch(block_unblock_customer(customerId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (successMessage) {\r\n      toast.success(successMessage);\r\n      dispatch(messageClear());\r\n    }\r\n    if (errorMessage) {\r\n      toast.success(errorMessage);\r\n      dispatch(messageClear());\r\n    }\r\n  }, [successMessage, errorMessage, dispatch]);\r\n\r\n  return (\r\n    <div className=\"px-2 lg:pr-7 my-6\">\r\n      {/* Sellers List Section */}\r\n      <div className=\"w-full  bg-white shadow-md rounded-md\">\r\n        {/* Table Header */}\r\n        <div className=\"h-14 bg-slate-600 rounded-t-md flex justify-between items-center px-4\">\r\n          <select\r\n            onChange={(e) => setPerPage(parseInt(e.target.value))}\r\n            className=\"px-3 py-2 rounded font-semibold\"\r\n          >\r\n            <option value=\"5\">5</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"15\">15</option>\r\n          </select>\r\n          <input\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value)}\r\n            className=\"hidden md:block bg-white border border-gray-300 h-10 px-3 py-1 rounded focus:outline-none focus:border-blue-500\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n          />\r\n        </div>\r\n        {/* Table Body */}\r\n        <div className=\"p-4\">\r\n          <table className=\"table-auto w-full text-center border-collapse border border-gray-300\">\r\n            <thead>\r\n              <tr className=\"bg-gray-200\">\r\n                <th className=\"border border-gray-300 px-4 py-2\">No</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Image</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Name</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Email Id</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Method</th>\r\n\r\n                <th className=\"border border-gray-300 px-4 py-2\">\r\n                  Block/UnBlock\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {customers.map((item, index) => (\r\n                <tr\r\n                  key={item._id}\r\n                  className=\"hover:bg-gray-100 h-[60px] border-t text-sm\"\r\n                >\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    {index + 1}\r\n                  </td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    <img\r\n                      src={\r\n                        item?.image ||\r\n                        `https://client.naveenprakash.in/images/user.png`\r\n                      }\r\n                      alt={item.name}\r\n                      className=\"w-12 h-12 rounded-full mx-auto\"\r\n                    />\r\n                  </td>\r\n\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    {item.name}\r\n                  </td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    {item.email}\r\n                  </td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    {item.method}\r\n                  </td>\r\n\r\n                  <td className=\"border border-gray-300 px-4 py-2\">\r\n                    <div className=\"flex justify-center gap-3\">\r\n                      <div\r\n                        onClick={() => {\r\n                          setblockItem(item);\r\n                          setModalClose(false);\r\n                        }}\r\n                        className=\"px-3 py-2 rounded-full hover:bg-blue-200 text-lg\"\r\n                      >\r\n                        {item.isBlocked ? <TbLockFilled /> : <TbLockOpen2 />}\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          {/* confirmation modal */}\r\n          {!modalClose && (\r\n            <div>\r\n              <ConfirmModal\r\n                message=\"Are you sure want block user\"\r\n                SetModalClose={setModalClose}\r\n                confimFunction={handleBlock}\r\n              />\r\n            </div>\r\n          )}\r\n          {/* pagination */}\r\n          <div className=\"w-full flex justify-end mt-4 bottom-4 right-4\">\r\n            <Pagination\r\n              pageNumber={currentPage}\r\n              setPageNumber={setCurrentPage}\r\n              totalItem={totalCustomers}\r\n              perPage={perPage}\r\n              showItem={3}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n"],"names":["_ref","message","SetModalClose","confimFunction","_jsx","className","children","_jsxs","onClick","handleCancel","handleConfirm","pageNumber","setPageNumber","totalItem","perPage","showItem","totalPage","Math","ceil","startPage","endPage","MdOutlineKeyboardDoubleArrowLeft","createBtn","btns","i","push","MdOutlineKeyboardDoubleArrowRight","Customers","searchValue","setSearchValue","useState","currentPage","setCurrentPage","setPerPage","modalClose","setModalClose","blockItem","setblockItem","dispatch","useDispatch","successMessage","errorMessage","loader","customers","totalCustomers","useSelector","store","customer","useEffect","obj","parseInt","page","get_customer","toast","success","messageClear","onChange","e","target","value","type","placeholder","map","item","index","src","image","alt","name","email","method","isBlocked","TbLockFilled","TbLockOpen2","_id","ConfirmModal","handleBlock","customerId","block_unblock_customer","Pagination"],"sourceRoot":""}